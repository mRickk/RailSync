
services:
  frontend:
    image: frontend
    build:
      context: ./nodejs/frontend
      dockerfile: Dockerfile
    volumes: #Aggiunto per permettere modifiche live alla view
      - ./nodejs/frontend:/app
      - /app/node_modules  # Previene conflitti tra node_modules host e container
    command: ["npm", "run", "dev"]
    restart: unless-stopped
    ports:
      - 5173:5173
    depends_on:
      - proxy
    networks:
      - outer
      - inner

  backend1:
    image: backend
    build:
      context: ./nodejs/backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      DB_URI: mongodb://mongodb:27017/dbrs
    depends_on:
      - mongodb
    networks:
      - inner

  backend2:
    image: backend
    build:
      context: ./nodejs/backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      DB_URI: mongodb://mongodb:27017/dbrs
    depends_on:
      - mongodb
    networks:
      - inner

  # first service to start
  mongodb:
    build:
      context: ./mongodb
      dockerfile: Dockerfile
    image: mymongo
    #command to be executed after execution initialized
    command: [ "docker-entrypoint.sh", "mongod" ]
    restart: always
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`;
        mongo --quiet $${host}/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s
    networks:
      - inner

  #TODO: Comment out because only used for debug reasons
  mongoexpress:
    image: mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: pass
      ME_CONFIG_MONGODB_URL: mongodb://mongodb:27017/dbrs
    restart: always
    ports:
      - "8082:8081"
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
    networks:
      - inner
      - outer

  proxy:
    image: nginx:latest
    ports:
      - "3000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend1
      - backend2
    networks:
      - inner
      - outer


networks:
  inner:
    driver: bridge
    internal: true
    driver_opts:
       com.docker.network.bridge.name: "br-inner89012"
       com.docker.network.enable_ipv6: "false"
  outer:
    driver: bridge
    internal: false
    driver_opts:
       com.docker.network.bridge.name: "br-outer89012"
       com.docker.network.enable_ipv6: "false"